//**********************************************************
//	PROJECT TELEPHONE BILLING
//**********************************************************

	//**********************************************************
//	INCLUDED HEADER FILES
//**********************************************************

#include <iostream.h>
#include <fstream.h>
#include <process.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <conio.h>
#include <dos.h>


//**********************************************************
// THIS CLASS CONTAINS ALL THE DRAWING FUNCTIONS
//**********************************************************

class LINES
{
	public :
			void LINE_HOR(int, int, int, char) ;
			void LINE_VER(int, int, int, char) ;
			void BOX(int,int,int,int,char) ;
			void CLEARUP(void) ;
			void CLEARDOWN(void) ;
} ;


//**********************************************************
// THIS CLASS CONTROL ALL THE FUNCTIONS IN THE MENU
//**********************************************************

class MENU
{
	public :
			void MAIN_MENU(void) ;
	private :
			void EDIT_MENU(void) ;
			void INTRODUCTION(void) ;
} ;


//**********************************************************
// THIS CLASS CONTROL ALL THE FUNCTIONS RELATED TO CUSTOMER
//**********************************************************

class TELEPAY
{
	public :
			void NEW_RECORD(void) ;
			void MODIFICATION(void) ;
			void DELETION(void) ;
			void DISPLAY(void) ;
			void LIST(void) ;
			void BILL(void) ;
			void CREDIT(void);
	private :
			void ADD_RECORD(int, char[], char[], char[], int, int, int, char[], char, char, char, float,float) ;
			void MODIFY_RECORD(int, char [], char [], char [], char [], char, char, char, float) ;
			void DELETE_RECORD(int) ;
			int  LASTCODE(void) ;
			int  CODEFOUND(int) ;
			int  RECORDNO(int) ;
			int  FOUND_CODE(int) ;
			void DISPLAY_RECORD(int) ;
			int  VALID_DATE(int, int, int) ;

			int   code, dd, mm, yy ;
			char  name[26], address[31], phone[10], cmp[16] ;
			char  pack, intn, hspn;
			float dur;
} ;


//**********************************************************
// THIS FUNCTION CONTROL ALL THE FUNCTIONS IN THE MAIN MENU
//**********************************************************

void MENU :: MAIN_MENU(void)
{
	char ch ;
	LINES L ;
	L.CLEARUP() ;
	textcolor(WHITE) ;
	while (1)
	{       textbackground(CYAN);
		clrscr() ;
		 textcolor(BLACK);
		 gotoxy(9,3);cprintf(" ÜÜÜÜÜÜÜÜÜ  ÜÜÜÜÜÜ  ÜÜ      ÜÜÜÜÜÜ          ÜÜÜÜÜÜ  ÜÜÜÜÜÜ  ÜÜ    ÜÜ  \n\r");
		 gotoxy(9,4);cprintf("    ÛÛÛ     ÛÛ      ÛÛ      ÛÛ              ÛÛ  ÛÛ  ÛÛ  ÛÛ    Û  Û    \n\r");
		 gotoxy(9,5);cprintf("    ÛÛÛ     ÛÛÜÜÜÜ  ÛÛ      ÛÛÜÜÜÜ  ÜÜÜÜÜÜ  ÛÛÜÜÜÜ  ÛÛÜÜÛÛ     ÛÛ    \n\r");
		 gotoxy(9,6);cprintf("    ÛÛÛ     ÛÛ      ÛÛ      ÛÛ              ÛÛ      ÛÛ  ÛÛ     ÛÛ     \n\r");
		 gotoxy(9,7);cprintf("    ÛÛÛ     ÛÛÜÜÜÜ  ÛÛÜÜÜÜ  ÛÛÜÜÜÜ          ÛÛ      ÛÛ  ÛÛ     ÛÛ     \n\r");
		 textcolor(WHITE+BLINK);
		 gotoxy(10,8);cprintf("-------------------------                  ---------------------------");
		 textcolor(BLUE);
		 gotoxy(36,8);cprintf("A NEW WAY TO PAY");
		 textcolor(RED);
		L.BOX(28,12,51,14,218) ;
		L.BOX(2,10,78,25,218) ;
		L.BOX(3,11,77,24,219) ;
		gotoxy(35,13) ;
		textcolor(GREEN);
		cprintf("MAIN MENU") ;
		gotoxy(30,15) ;
		textcolor(MAGENTA);
		cprintf("1: NEW RECORD") ;
		gotoxy(30,16) ;
		textcolor(LIGHTRED);
		cprintf("2: DISPLAY RECORD");
		gotoxy(30,17) ;
		textcolor(RED);
		cprintf("3: LIST OF RECORD") ;
		gotoxy(30,18) ;
		textcolor(YELLOW);
		cprintf("4: BILL") ;
		gotoxy(30,19) ;
		textcolor(LIGHTMAGENTA);
		cprintf("5: EDIT") ;
		gotoxy(30,20) ;
		textcolor(BLUE);
		cprintf("6: CREDIT");
		gotoxy(30,21);
		textcolor(BROWN);
		cprintf("0: QUIT" );
		gotoxy(30,23) ;
		textcolor(DARKGRAY);
		cprintf("ENTER YOUR CHOICE :") ;
		textcolor(BLACK);

		ch = getch() ;
		if (ch == 27 || ch == '0')
			break ;
		else
		if (ch == '1')
		{
			TELEPAY T ;
			T.NEW_RECORD() ;
		}
		else
		if (ch == '2')
		{
			TELEPAY T ;
			T.DISPLAY() ;
		}
		else
		if (ch == '3')
		{
			TELEPAY T ;
			T.LIST() ;
		}
		else
		if (ch == '4')
		{
			TELEPAY T ;
			T.BILL() ;
		}
		else
		if (ch == '5')
			EDIT_MENU() ;
		else
		if(ch =='6')
		{
		TELEPAY T;
		T.CREDIT();
		}
	}
	L.CLEARUP() ;
}


//**********************************************************
// THIS FUNCTION CONTROL ALL THE FUNCTIONS IN THE EDIT MENU
//**********************************************************

void MENU :: EDIT_MENU(void)
{
	char ch ;
	LINES L ;
	L.CLEARDOWN() ;
	while (1)
	{
		clrscr() ;
		L.BOX(28,8,49,10,218) ;
		L.BOX(10,5,71,21,218) ;
		L.BOX(11,6,70,20,219) ;
		gotoxy(31,9) ;
		cout <<"E D I T  M E N U" ;
		gotoxy(30,13) ;
		cout <<"1: DELETE RECORD" ;
		gotoxy(30,14) ;
		cout <<"2: MODIFY RECORD" ;
		gotoxy(30,15) ;
		cout <<"0: EXIT" ;
		gotoxy(30,17) ;
		cout <<"ENTER YOUR CHOICE :" ;
		ch = getch() ;
		if (ch == 27 || ch == '0')
			break ;
		else
		if (ch == '1')
		{
			TELEPAY T ;
			T.DELETION() ;
		}
		else
		if (ch == '2')
		{
			TELEPAY T ;
			T.MODIFICATION() ;
		}
	}
	L.CLEARDOWN() ;
}


//**********************************************************
// THIS FUNCTION DRAWS THE HORRIZONTAL LINE
//**********************************************************

void LINES :: LINE_HOR(int column1, int column2, int row, char c)
{
	for ( column1; column1<=column2; column1++ )
	{
		gotoxy(column1,row) ;
		cout <<c ;
	}
}


//**********************************************************
// THIS FUNCTION DRAWS THE VERTICAL LINE
//**********************************************************

void LINES :: LINE_VER(int row1, int row2, int column, char c)
{
	for ( row1; row1<=row2; row1++ )
	{
		gotoxy(column,row1) ;
		cout <<c ;
	}
}


//**********************************************************
// THIS FUNCTION DRAWS THE BOX
//**********************************************************

void LINES :: BOX(int column1, int row1, int column2, int row2, char c)
{
	char ch=218 ;
	char c1, c2, c3, c4 ;
	char l1=196, l2=179 ;
	if (c == ch)
	{
		c1=218 ;
		c2=191 ;
		c3=192 ;
		c4=217 ;
		l1 = 196 ;
		l2 = 179 ;
	}
	else
	{
		c1=c ;
		c2=c ;
		c3=c ;
		c4=c ;
		l1 = c ;
		l2 = c ;
	}
	gotoxy(column1,row1) ;
	cout <<c1 ;
	gotoxy(column2,row1) ;
	cout <<c2 ;
	gotoxy(column1,row2) ;
	cout <<c3 ;
	gotoxy(column2,row2) ;
	cout <<c4 ;
	column1++ ;
	column2-- ;
	LINE_HOR(column1,column2,row1,l1) ;
	LINE_HOR(column1,column2,row2,l1) ;
	column1-- ;
	column2++ ;
	row1++ ;
	row2-- ;
	LINE_VER(row1,row2,column1,l2) ;
	LINE_VER(row1,row2,column2,l2) ;
}


//**********************************************************
// THIS FUNCTION CLEAR THE SCREEN LINE BY LINE UPWARD
//**********************************************************

void LINES :: CLEARUP(void)
{
	for (int i=25; i>=1; i--)
	{
		delay(20) ;
		gotoxy(1,i) ; clreol() ;
	}
}


//**********************************************************
// THIS FUNCTION CLEAR THE SCREEN LINE BY LINE DOWNWORD
//**********************************************************

void LINES :: CLEARDOWN(void)
{
	for (int i=1; i<=25; i++)
	{
		delay(20) ;
		gotoxy(1,i) ; clreol() ;
	}
}


//**********************************************************
// THIS FUNCTION ADDS THE GIVEN DATA IN THE CUSTOMER'S FILE
//**********************************************************

void TELEPAY :: ADD_RECORD(int ecode, char ename[26], char eaddress[31], char ephone[10], int d, int m, int y, char ecmp[16], char epack, char eintn, char ehspn, float edur,float r )
{
r=0;
	TELEPAY e;
	char hspn;
	fstream file ;
	file.open("TELEPAY.DAT", ios::app) ;
	e.code = ecode ;
	strcpy(e.name,ename) ;
	strcpy(e.address,eaddress) ;
	strcpy(e.phone,ephone) ;
	e.dd = d ;
	e.mm = m ;
	e.yy = y ;
	strcpy(e.cmp,ecmp) ;
	e.pack = epack ;
	e.intn = eintn ;
	e.hspn = ehspn ;
	e.dur = edur ;
	file.write((char *) &e, sizeof(TELEPAY)) ;
	file.close() ;
}


//**********************************************************
// THIS FUNCTION MODIFY THE GIVEN DATA IN THE
// CUSTOMER'S FILE
//**********************************************************

void TELEPAY :: MODIFY_RECORD(int ecode, char ename[26], char eaddress[31], char ephone[10], char ecmp[16], char epack, char eintn, char ehspn, float edur)
{
	int recno ;
	recno = RECORDNO(ecode) ;
	fstream file ;
	file.open("TELEPAY.DAT", ios::out | ios::ate) ;
	strcpy(name,ename) ;
	strcpy(address,eaddress) ;
	strcpy(phone,ephone) ;
	strcpy(cmp,ecmp) ;
	pack = epack ;
	intn = eintn ;
	hspn = ehspn ;
	dur = edur ;
	int location ;
	location = (recno-1) * sizeof(TELEPAY) ;
	file.seekp(location) ;
	file.write((char *) this, sizeof(TELEPAY)) ;
	file.close() ;
}


//**********************************************************
// THIS FUNCTION DELETE THE RECORD IN THE CUSTOMER FILE
// FOR THE GIVEN CUSTOMER CODE
//**********************************************************

void TELEPAY :: DELETE_RECORD(int ecode)
{
	fstream file ;
	file.open("TELEPAY.DAT", ios::in) ;
	fstream temp ;
	temp.open("temp.dat", ios::out) ;
	file.seekg(0,ios::beg) ;
	while (!file.eof())
	{
		file.read((char *) this, sizeof(TELEPAY)) ;
		if (file.eof())
			break ;
		if (code != ecode)
			temp.write((char *) this, sizeof(TELEPAY)) ;
	}
	file.close() ;
	temp.close() ;
	file.open("TELEPAY.DAT", ios::out) ;
	temp.open("temp.dat", ios::in) ;
	temp.seekg(0,ios::beg) ;
	while (!temp.eof())
	{
		temp.read((char *) this, sizeof(TELEPAY)) ;
		if ( temp.eof() )
			break ;
		file.write((char *) this, sizeof(TELEPAY)) ;
	}
	file.close() ;
	temp.close() ;
}


//**********************************************************
// THIS FUNCTION RETURNS THE LAST CUSTOMER'S CODE
//**********************************************************

int TELEPAY :: LASTCODE(void)
{
	fstream file ;
	file.open("TELEPAY.DAT", ios::in) ;
	file.seekg(0,ios::beg) ;
	int count=0 ;
	while (file.read((char *) this, sizeof(TELEPAY)))
		count = code ;
	file.close() ;
	return count ;
}


//**********************************************************
// THIS FUNCTION RETURNS 0 IF THE GIVEN CODE NOT FOUND
//**********************************************************

int TELEPAY :: FOUND_CODE(int ecode)
{
	fstream file ;
	file.open("TELEPAY.DAT", ios::in) ;
	file.seekg(0,ios::beg) ;
	int found=0 ;
	while (file.read((char *) this, sizeof(TELEPAY)))
	{
		if (code == ecode)
		{
			found = 1 ;
			break ;
		}
	}
	file.close() ;
	return found ;
}


//**********************************************************
// THIS FUNCTION RETURNS RECORD NO. OF THE GIVEN CODE
//**********************************************************

int TELEPAY :: RECORDNO(int ecode)
{
	fstream file ;
	file.open("TELEPAY.DAT", ios::in) ;
	file.seekg(0,ios::beg) ;
	int recno=0 ;
	while (file.read((char *) this, sizeof(TELEPAY)))
	{
		recno++ ;
		if (code == ecode)
			break ;
	}
	file.close() ;
	return recno ;
}


//**********************************************************
// THIS FUNCTION DISPLAYS THE LIST OF THE CUSTOMER
//**********************************************************

void TELEPAY :: LIST(void)
{
	clrscr() ;
	int row = 6 , found=0, flag=0 ;
	char ch ;
	gotoxy(31,2) ;
	cout <<"LIST OF CUSTOMER" ;
	gotoxy(30,3) ;
	cout <<"~~~~~~~~~~~~~~~~~~~" ;
	gotoxy(1,4) ;
	cout <<"CODE NAME                     PHONE    BGD         COMPANY    PACK  DURATION" ;
	gotoxy(1,5) ;
	cout <<"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" ;
	fstream file ;
	file.open("TELEPAY.DAT", ios::in) ;
	file.seekg(0,ios::beg) ;
	while (file.read((char *) this, sizeof(TELEPAY)))
	{
		flag = 0 ;
		delay(20) ;
		found = 1 ;
		gotoxy(2,row) ;
		cout <<code ;
		gotoxy(6,row) ;
		cout <<name ;
		gotoxy(31,row) ;
		cout	<<phone ;
		gotoxy(40,row) ;
		cout <<dd <<"/" <<mm <<"/" <<yy ;
		gotoxy(54,row) ;
		cout <<cmp ;
		gotoxy(64,row) ;
		cout <<pack ;
		gotoxy(70,row);
		cout<<dur;

		if ( row == 23 )
		{
			flag = 1 ;
			row = 6 ;
			gotoxy(1,25) ;
			cout <<"Press any key to continue or Press <ESC> to exit" ;
			ch = getch() ;
			if (ch == 27)
				break ;
			clrscr() ;
			gotoxy(31,2) ;
			cout <<"LIST OF EMPLOYEES" ;
			gotoxy(30,3) ;
			cout <<"~~~~~~~~~~~~~~~~~~~" ;
			gotoxy(1,4) ;
			cout <<"CODE NAME                     PHONE    BGD         COMPANY    PACK  DURATION" ;
			gotoxy(1,5) ;
			cout <<"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" ;
		}
		else
			row++ ;
	}
	if (!found)
	{
		gotoxy(5,10) ;
		cout <<"\7Records not found" ;
	}
	if (!flag)
	{
		gotoxy(1,25) ;
		cout <<"Press any key to continue..." ;
		getche() ;
	}
	file.close () ;
}


//**********************************************************
// THIS FUNCTION DISPLAYS THE RECORD OF THE CUSTOMER
//**********************************************************

void TELEPAY :: DISPLAY_RECORD(int ecode)
{
	fstream file ;
	file.open("TELEPAY.DAT", ios::in) ;
	file.seekg(0,ios::beg) ;
	while (file.read((char *) this, sizeof(TELEPAY)))
	{
		if (code == ecode)
		{
			gotoxy(5,5) ;
			cout <<"Coustomer Code # " <<code ;
			gotoxy(5,6) ;
			cout <<"~~~~~~~~~~~~~" ;
			gotoxy(5,7) ;
			cout <<"Name         : " <<name ;
			gotoxy(5,8) ;
			cout <<"Address      : " <<address ;
			gotoxy(5,9) ;
			cout <<"Phone no.    : " <<phone ;
			gotoxy(5,11) ;
			cout <<"BILL GENERATION DATE" ;
			gotoxy(5,12) ;
			cout <<"~~~~~~~~~~~~" ;
			gotoxy(5,13) ;
			cout <<"Day   : " <<dd ;
			gotoxy(5,14) ;
			cout <<"Month : " <<mm ;
			gotoxy(5,15) ;
			cout <<"Year  : " <<yy ;
			gotoxy(5,17) ;
			cout <<"Company  : " <<cmp ;
			gotoxy(5,18) ;
			cout <<"Pack        : " <<pack ;
			if (pack != 'E')
			{
				gotoxy(5,19) ;
				cout <<"Internet Connection (y/n)    : " <<intn ;
				gotoxy(5,20) ;
				cout <<"Hi-speed net pack (y/n) : " <<hspn;

			}
			gotoxy(5,21) ;
			cout <<"Duration           : " <<dur ;
		}
	}
	file.close() ;
}

void TELEPAY :: CREDIT(void)
{textcolor(WHITE);
  textbackground(CYAN);
 int a;
 for(a=100;a>1;a--)
  {
  clrscr();
  gotoxy(25,10);cout<<"T";delay(100);
		cout<<"E";delay(100);
		cout<<"L";delay(100);
		cout<<"E";delay(100);
		cout<<"P";delay(100);
		cout<<"H";delay(100);
		cout<<"O";delay(100);
		cout<<"N";delay(100);
		cout<<"E";delay(100);

  gotoxy(36,10);cout<<"B";delay(100);
		cout<<"I";delay(100);
		cout<<"L";delay(100);
		cout<<"L";delay(100);
		cout<<"I";delay(100);
		cout<<"N";delay(100);
		cout<<"G";delay(100);

  gotoxy(45,10);cout<<"S";delay(100);
		cout<<"Y";delay(100);
		cout<<"S";delay(100);
		cout<<"T";delay(100);
		cout<<"E";delay(100);
		cout<<"M";delay(100);

  gotoxy(15,13);cout<<"C";delay(100);
		cout<<"R";delay(100);
		cout<<"E";delay(100);
		cout<<"A";delay(100);
		cout<<"T";delay(100);
		 cout<<"E";delay(100);
		cout<<"D";delay(100);
		cout<<" B";delay(100);
		cout<<"Y";delay(100);

       gotoxy(18,15);		cout<<"K";delay(100);
		cout<<"A";delay(100);
		cout<<"P";delay(100);
		cout<<"I";delay(100);
		cout<<"L";delay(100);
		cout<<" C";delay(100);
		cout<<"H";delay(100);
		cout<<"O";delay(100);
		cout<<"U";delay(100);
		cout<<"H";delay(100);
		cout<<"A";delay(100);
		cout<<"N";delay(100);

       gotoxy(18,17);		cout<<"D";delay(100);
		cout<<"R";delay(100);
		cout<<"I";delay(100);
		cout<<"S";delay(100);
		cout<<"H";delay(100);
		cout<<"T";delay(100);
		cout<<"D";delay(100);
		cout<<"Y";delay(100);
		cout<<"U";delay(100);
		cout<<"M";delay(100);
		cout<<"N";delay(100);
		cout<<" S";delay(100);
		cout<<"H";delay(100);
		cout<<"R";delay(100);
		cout<<"I";delay(100);
		cout<<"V";delay(100);
		cout<<"A";delay(100);
		cout<<"S";delay(100);
		cout<<"T";delay(100);
		cout<<"A";delay(100);
		cout<<"V";delay(100);
		cout<<"A";delay(100);

    gotoxy(15,19);		cout<<"U";delay(100);
		cout<<"N";delay(100);
		cout<<"D";delay(100);
		cout<<"E";delay(100);
		cout<<"R";delay(100);
		cout<<" T";delay(100);
		cout<<"H";delay(100);
		cout<<"E";delay(100);
		cout<<" G";delay(100);
		cout<<"U";delay(100);
		cout<<"I";delay(100);
		cout<<"D";delay(100);
		cout<<"A";delay(100);
		cout<<"N";delay(100);
		cout<<"C";delay(100);
		cout<<"E";delay(100);
		cout<<" O";delay(100);
		cout<<"F";delay(100);
		cout<<",";delay(100);
	gotoxy(41,21);	cout<<"MRS.LALITA CHATTERJEE";delay(100);
	gotoxy(15,25);	cout<<"Press ENTER to go to MAIN MENU";delay(100);


		     break;
  }

     getch();
}

//**********************************************************
// THIS FUNCTION GIVE DATA TO ADD IN THE FILE
//**********************************************************

void TELEPAY :: NEW_RECORD(void)
{
	clrscr() ;
	char  ch, epack, eintn='N', ehspn='N' ;
	char  ename[26], eaddress[31], ephone[10], ecmp[16], t1[10] ;
	float t2=0.0, edur=0.0,r=0.0;
		int   d, m, y, ecode, valid ;
	gotoxy(72,2) ;
	cout <<"<0>=EXIT" ;
	gotoxy(28,3) ;
	cout <<"ADDITION OF NEW RECORD" ;
	gotoxy(5,5) ;
	cout <<"Customer Code # " ;
	gotoxy(5,6) ;
	cout <<"~~~~~~~~~~~~~" ;
	gotoxy(5,7) ;
	cout <<"Name         : " ;
	gotoxy(5,8) ;
	cout <<"Address      : " ;
	gotoxy(5,9) ;
	cout <<"Phone no.    : " ;
	gotoxy(5,11) ;
	cout <<"BIll GENERATION DATE" ;
	gotoxy(5,12) ;
	cout <<"~~~~~~~~~~~~" ;
	gotoxy(5,13) ;
	cout <<"Day   : " ;
	gotoxy(5,14) ;
	cout <<"Month : " ;
	gotoxy(5,15) ;
	cout <<"Year  : " ;
	gotoxy(5,17) ;
	cout <<"Company  : " ;
	gotoxy(5,18) ;
	cout <<"Pack  :" ;
	gotoxy(5,21) ;
	cout <<"Duration  : " ;

	ecode = LASTCODE() + 1 ;
	if (ecode == 1)
	{
		ADD_RECORD(ecode, "null", "null", "null", 0, 0, 0, "null", 'n', 'n', 'n', 0.0,0.0) ;
		DELETE_RECORD(ecode) ;
	}
	gotoxy(21,5) ;
	cout <<ecode ;
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter the name of the Coustomer" ;
		gotoxy(20,7) ; clreol() ;
		gets(ename) ;
		strupr(ename) ;
		if (ename[0] == '0')
			return ;
		if (strlen(ename) < 1 || strlen(ename) > 25)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly (Range: 1..25)" ;
			getch() ;
		}
	} while (!valid) ;
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter Address of the Customer" ;
		gotoxy(20,8) ; clreol() ;
		gets(eaddress) ;
		strupr(eaddress) ;
		if (eaddress[0] == '0')
			return ;
		if (strlen(eaddress) < 1 || strlen(eaddress) > 30)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly (Range: 1..30)" ;
			getch() ;
		}
	} while (!valid) ;
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter Phone no. of the Customer" ;
		gotoxy(20,9) ; clreol() ;
		gets(ephone) ;
		if (ephone[0] == '0')
			return ;
		if ((strlen(ephone) < 7 && strlen(ephone) > 0) || (strlen(ephone) > 9))
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly" ;
			getch() ;
		}
	} while (!valid) ;
	if (strlen(ephone) == 0)
		strcpy(ephone,"-") ;
	char tday[3], tmonth[3], tyear[5] ;
	int td ;
	do
	{
		valid = 1 ;
		do
		{
			gotoxy(5,25) ; clreol() ;
			cout <<"ENTER BILL GENERATION DATE" ;
			gotoxy(13,13) ; clreol() ;
			gets(tday) ;
			td = atoi(tday) ;
			d = td ;
			if (tday[0] == '0')
				return ;
		} while (d == 0) ;
		do
		{
			gotoxy(5,25) ; clreol() ;
			cout <<"ENTER BILL GENERATION DATE" ;
			gotoxy(13,14) ; clreol() ;
			gets(tmonth) ;
			td = atoi(tmonth) ;
			m = td ;
			if (tmonth[0] == '0')
				return ;
		} while (m == 0) ;
		do
		{
			gotoxy(5,25) ; clreol() ;
			cout <<"ENTER BILL GENERATION DATE" ;
			gotoxy(13,15) ; clreol() ;
			gets(tyear) ;
			td = atoi(tyear) ;
			y = td ;
			if (tyear[0] == '0')
				return ;
		} while (y == 0) ;
		if (d>31 || d<1)
			valid = 0 ;
		else
		if (((y%4)!=0 && m==2 && d>28) || ((y%4)==0 && m==2 && d>29))
			valid = 0 ;
		else
		if ((m==4 || m==6 || m==9 || m==11) && d>30)
			valid = 0 ;
		else
		if (y<1990 || y>2020)
			valid = 0 ;
		if (!valid)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly" ;
			getch() ;
			gotoxy(13,14) ; clreol() ;
			gotoxy(13,15) ; clreol() ;
		}
	} while (!valid) ;
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter Company of Telephone used by Coustomer" ;
		gotoxy(15,17) ; clreol() ;
		gets(ecmp) ;
		strupr(ecmp) ;
		if (ecmp[0] == '0')
			return ;
		if (strlen(ecmp) < 1 || strlen(ecmp) > 15)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly (Range: 1..15)" ;
			getch() ;
		}
	} while (!valid) ;
	do
	{
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter Pack of the Employee (A,B,C,D,E)" ;
		gotoxy(13,18) ; clreol() ;
		epack = getche() ;
		epack = toupper(epack) ;
		if (epack == '0')
			return ;
	} while (epack < 'A' || epack > 'E') ;
	if (epack != 'E')
	{
		gotoxy(5,19) ;
		cout <<"Intenet connection (y/n)    : " ;
		gotoxy(5,20) ;
		cout <<"Hi-speed net pack (y/n) : " ;
		do
		{
			gotoxy(5,25) ; clreol() ;
			cout <<"ENTER IF INTERNET CONNECTION IS ALLOTED TO EMPLOYEE OR NOT" ;
			gotoxy(30,19) ; clreol() ;
			eintn = getche() ;
			eintn = toupper(eintn) ;
			if (eintn == '0')
				return ;
		} while (eintn != 'Y' && eintn != 'N') ;
		do
		{
			gotoxy(5,25) ; clreol() ;
			cout <<"ENTER IF HI-SPEED NET PACK IS ALLOTED TO EMPLOYEE OR NOT" ;
			gotoxy(33,20) ; clreol() ;
			ehspn = getche() ;
			ehspn = toupper(ehspn) ;
			if (ehspn == '0')
				return ;
		} while (ehspn != 'Y' && ehspn != 'N') ;
	}
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"ENTER THE DURATION TIME (in min.)" ;
		gotoxy(17,21) ; clreol() ;
		gets(t1) ;
		t2 = atof(t1) ;
		edur = t2 ;
		if (edur== 0)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7SHOULD NOT 0 or negative value" ;
			getch() ;
		}
	} while (!valid) ;

	gotoxy(5,25) ; clreol() ;
	do
	{
		gotoxy(5,24) ; clreol() ;
		cout <<"Do you want to save (y/n) " ;
		ch = getche() ;
		ch = toupper(ch) ;
		if (ch == '0')
			return ;
	} while (ch != 'Y' && ch != 'N') ;
	if (ch == 'N')
		return ;
	ADD_RECORD(ecode, ename, eaddress, ephone, d, m, y, ecmp, epack, eintn, ehspn, edur,r) ;
}


//**********************************************************
// THIS FUNCTION GIVE CODE FOR THE DISPLAY OF THE RECORD
//**********************************************************

void TELEPAY :: DISPLAY(void)
{
	clrscr() ;
	char t1[10] ;
	int t2, ecode ;
	gotoxy(72,2) ;
	cout <<"<0>=EXIT" ;
	gotoxy(5,5) ;
	cout <<"Enter code of the Customer  " ;
	gets(t1) ;
	t2 = atoi(t1) ;
	ecode = t2 ;
	if (ecode == 0)
		return ;
	clrscr() ;
	if (!FOUND_CODE(ecode))
	{
		gotoxy(5,5) ;
		cout <<"\7Record not found" ;
		getch() ;
		return ;
	}
	DISPLAY_RECORD(ecode) ;
	gotoxy(5,25) ;
	cout <<"Press any key to continue..." ;
	getch() ;
}


//**********************************************************
// THIS FUNCTION GIVE DATA FOR THE MODIFICATION OF THE
// CUSTOMER RECORD
//**********************************************************

void TELEPAY :: MODIFICATION(void)
{
	clrscr() ;
	char  ch, epack, eintn='N', ehspn='N' ;
	char  ename[26], eaddress[31], ephone[10], ecmp[16], t1[10] ;
	float t2=0.0, edur=0.0;
	int   ecode, valid ;
	gotoxy(72,2) ;
	cout <<"<0>=EXIT" ;
	gotoxy(5,5) ;
	cout <<"Enter code of the Customer  " ;
	gets(t1) ;
	t2 = atoi(t1) ;
	ecode = t2 ;
	if (ecode == 0)
		return ;
	clrscr() ;
	if (!FOUND_CODE(ecode))
	{
		gotoxy(5,5) ;
		cout <<"\7Record not found" ;
		getch() ;
		return ;
	}
	gotoxy(72,2) ;
	cout <<"<0>=EXIT" ;
	gotoxy(22,3) ;
	cout <<"MODIFICATION OF THE CUSTOMER RECORD" ;
	DISPLAY_RECORD(ecode) ;
	do
	{
		gotoxy(5,24) ; clreol() ;
		cout <<"Do you want to modify this record (y/n) " ;
		ch = getche() ;
		ch = toupper(ch) ;
		if (ch == '0')
			return ;
	} while (ch != 'Y' && ch != 'N') ;
	if (ch == 'N')
		return ;
	clrscr() ;
	fstream file ;
	file.open("TELEPAY.DAT", ios::in) ;
	file.seekg(0,ios::beg) ;
	while (file.read((char *) this, sizeof(TELEPAY)))
	{
		if (code == ecode)
			break ;
	}
	file.close() ;
	gotoxy(5,5) ;
	cout <<"Coustomer Code # " <<ecode ;
	gotoxy(5,6) ;
	cout <<"~~~~~~~~~~~~~" ;
	gotoxy(40,5) ;
	cout <<"BILL GENERATION DATE : " ;
	gotoxy(40,6) ;
	cout <<"~~~~~~~~~~~~~~" ;
	gotoxy(55,5) ;
	cout <<dd <<"/" <<mm <<"/" <<yy ;
	gotoxy(5,7) ;
	cout <<"Name         : " ;
	gotoxy(5,8) ;
	cout <<"Address      : " ;
	gotoxy(5,9) ;
	cout <<"Phone no.    : " ;
	gotoxy(5,10) ;
	cout <<"Company  : " ;
	gotoxy(5,11) ;
	cout <<"Pack        : " ;
	gotoxy(5,14) ;
	cout <<"Duration           : " ;
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter the name of the Coustomer or <ENTER> FOR NO CHANGE" ;
		gotoxy(20,7) ; clreol() ;
		gets(ename) ;
		strupr(ename) ;
		if (ename[0] == '0')
			return ;
		if (strlen(ename) > 25)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly (Range: 1..25)" ;
			getch() ;
		}
	} while (!valid) ;
	if (strlen(ename) == 0)
	{
		strcpy(ename,name) ;
		gotoxy(20,7) ;
		cout <<ename ;
	}
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter Address of the Coustomer  or <ENTER> FOR NO CHANGE" ;
		gotoxy(20,8) ; clreol() ;
		gets(eaddress) ;
		strupr(eaddress) ;
		if (eaddress[0] == '0')
			return ;
		if (strlen(eaddress) > 30)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly (Range: 1..30)" ;
			getch() ;
		}
	} while (!valid) ;
	if (strlen(eaddress) == 0)
	{
		strcpy(eaddress,address) ;
		gotoxy(20,8) ;
		cout <<eaddress ;
	}
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter Phone no. of the Coustomer or or <ENTER> FOR NO CHANGE" ;
		gotoxy(20,9) ; clreol() ;
		gets(ephone) ;
		if (ephone[0] == '0')
			return ;
		if ((strlen(ephone) < 7 && strlen(ephone) > 0) || (strlen(ephone) > 9))
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly" ;
			getch() ;
		}
	} while (!valid) ;
	if (strlen(ephone) == 0)
	{
		strcpy(ephone,phone) ;
		gotoxy(20,9) ;
		cout <<ephone ;
	}
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter Company Of Telephone Used By Coustomer or <ENTER> FOR NO CHANGE" ;
		gotoxy(20,10) ; clreol() ;
		gets(ecmp) ;
		strupr(ecmp) ;
		if (ecmp[0] == '0')
			return ;
		if (strlen(ecmp) > 15)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7Enter correctly (Range: 1..15)" ;
			getch() ;
		}
	} while (!valid) ;
	if (strlen(ecmp) == 0)
	{
		strcpy(ecmp,cmp) ;
		gotoxy(20,10) ;
		cout <<ecmp ;
	}
	do
	{
		gotoxy(5,25) ; clreol() ;
		cout <<"Enter Pack Alloted To Coustomer (A,B,C,D,E) or <ENTER> FOR NO CHANGE" ;
		gotoxy(20,11) ; clreol() ;
		epack = getche() ;
		epack = toupper(epack) ;
		if (epack == '0')
			return ;
		if (epack == 13)
		{
			epack = pack ;
			gotoxy(20,11) ;
			cout <<pack ;
		}
	} while (epack < 'A' || epack > 'E') ;
	if (epack != 'E')
	{
		gotoxy(5,12) ;
		cout <<"Iternet connection (y/n)    : " ;
		gotoxy(5,13) ;
		cout <<"Hi-speed net pack (y/n) : " ;

		do
		{
			gotoxy(5,25) ; clreol() ;
			cout <<"ALLOTED Internet connection ? or <ENTER> FOR NO CHANGE" ;
			gotoxy(36,12) ; clreol() ;
			eintn = getche() ;
			eintn = toupper(eintn) ;
			if (eintn == '0')
				return ;
			if (eintn == 13)
			{
				eintn = intn ;
				gotoxy(22,12) ;
				cout <<eintn ;
			}
		} while (eintn != 'Y' && eintn != 'N') ;
		do
		{
			gotoxy(5,25) ; clreol() ;
			cout <<"ALLOTED HI-SPEED NET PACK TO COUSTOMER or <ENTER> FOR NO CHANGE" ;
			gotoxy(34,13) ; clreol() ;
			ehspn = getche() ;
			ehspn = toupper(ehspn) ;
			if (ehspn == '0')
				return ;
			if (ehspn == 13)
			{
				ehspn = hspn ;
				gotoxy(22,13) ;
				cout <<ehspn ;
			}
		} while (ehspn != 'Y' && ehspn != 'N') ;
	}
	do
	{
		valid = 1 ;
		gotoxy(5,25) ; clreol() ;
		cout <<"ENTER CALL DURATION TIME (in.min) or <ENTER> FOR NO CHANGE" ;
		gotoxy(22,14) ; clreol() ;
		gets(t1) ;
		t2 = atof(t1) ;
		edur = t2 ;
		if (edur == 0)
		{
			valid = 0 ;
			gotoxy(5,25) ; clreol() ;
			cout <<"\7SHOULD NOT 0 or negative value" ;
			getch() ;
		}
	} while (!valid) ;
	if (strlen(t1) == 0)
	{
		edur = dur ;
		gotoxy(22,14) ;
		cout <<edur ;
	}

	gotoxy(5,25) ; clreol() ;
	do
	{
		gotoxy(5,18) ; clreol() ;
		cout <<"Do you want to save (y/n) " ;
		ch = getche() ;
		ch = toupper(ch) ;
		if (ch == '0')
			return ;
	} while (ch != 'Y' && ch != 'N') ;
	if (ch == 'N')
		return ;
	MODIFY_RECORD(ecode,ename,eaddress,ephone,ecmp,epack,eintn,ehspn,edur) ;
	gotoxy(5,23) ;
	cout <<"\7Record Modified" ;
	gotoxy(5,25) ;
	cout <<"Press any key to continue..." ;
	getch() ;
}


//**********************************************************
// THIS FUNCTION GIVE CODE NO. FOR THE DELETION OF THE
// CUSTOMER RECORD
//**********************************************************

void TELEPAY :: DELETION(void)
{
	clrscr() ;
	char t1[10], ch ;
	int t2, ecode ;
	gotoxy(72,2) ;
	cout <<"<0>=EXIT" ;
	gotoxy(5,5) ;
	cout <<"Enter Coustomer Code  " ;
	gets(t1) ;
	t2 = atoi(t1) ;
	ecode = t2 ;
	if (ecode == 0)
		return ;
	clrscr() ;
	if (!FOUND_CODE(ecode))
	{
		gotoxy(5,5) ;
		cout <<"\7Record not found" ;
		getch() ;
		return ;
	}
	gotoxy(72,2) ;
	cout <<"<0>=EXIT" ;
	gotoxy(24,3) ;
	cout <<"DELETION OF THE COUSTOMER RECORD" ;
	DISPLAY_RECORD(ecode) ;
	do
	{
		gotoxy(5,24) ; clreol() ;
		cout <<"Do you want to delete this record (y/n) " ;
		ch = getche() ;
		ch = toupper(ch) ;
		if (ch == '0')
			return ;
	} while (ch != 'Y' && ch != 'N') ;
	if (ch == 'N')
		return ;
	DELETE_RECORD(ecode) ;
	LINES L ;
	L.CLEARDOWN() ;
	gotoxy(5,23) ;
	cout <<"\7Record Deleted" ;
	gotoxy(5,25) ;
	cout <<"Press any key to continue..." ;
	getch() ;
}


//**********************************************************
// THIS FUNCTION RETURN 0 IF THE GIVEN DATE IS INVALID
//**********************************************************

int TELEPAY :: VALID_DATE(int d1, int m1, int y1)
{
	int valid=1 ;
	if (d1>31 || d1<1)
		valid = 0 ;
	else
	if (((y1%4)!=0 && m1==2 && d1>28) || ((y1%4)==0 && m1==2 && d1>29))
		valid = 0 ;
	else
	if ((m1==4 || m1==6 || m1==9 || m1==11) && d1>30)
		valid = 0 ;
	return valid ;
}


//**********************************************************
// THIS FUNCTION PRINTS THE BILL FOR CUSTOMER
//**********************************************************

void TELEPAY :: BILL(void)
{
	clrscr() ;
	char t1[10] ;
	int t2, ecode, valid ;
	gotoxy(72,2) ;
	cout <<"<0>=EXIT" ;
	gotoxy(5,5) ;
	cout <<"Enter Coustomer Code  " ;
	gets(t1) ;
	t2 = atoi(t1) ;
	ecode = t2 ;
	if (ecode == 0)
		return ;
	clrscr() ;
	if (!FOUND_CODE(ecode))
	{
		gotoxy(5,5) ;
		cout <<"\7Record not found" ;
		getch() ;
		return ;
	}
	fstream file ;
	file.open("TELEPAY.DAT", ios::in) ;
	file.seekg(0,ios::beg) ;
	while (file.read((char *) this, sizeof(TELEPAY)))
	{
		if (code == ecode)
			break ;
	}
	file.close() ;
	int d1, m1, y1 ;
	struct date d;
	getdate(&d);
	d1 = d.da_day ;
	m1 = d.da_mon ;
	y1 = d.da_year ;
	char *mon[12]={"January","February","March","April","May","June","July","August","September","November","December"} ;
	LINES L ;
	L.BOX(2,1,79,25,219) ;
	gotoxy(31,2) ;
	cout <<"TELEPAY" ;
	L.LINE_HOR(3,78,3,196) ;
	gotoxy(34,4) ;
	cout <<"BILL" ;
	gotoxy(60,4) ;
	cout <<"Date: " <<d1 <<"/" <<m1 <<"/" <<y1 ;
	gotoxy(34,5) ;
	cout <<mon[m1-1] <<", " <<y1 ;
	L.LINE_HOR(3,78,6,196) ;
	gotoxy(6,7) ;
	cout <<"Coustomer Name : " <<name ;
	gotoxy(6,8) ;
	cout <<"Company   : " <<cmp ;
	gotoxy(67,8) ;
	cout <<"Pack : " <<pack ;
	L.BOX(6,9,75,22,218) ;
	L.LINE_HOR(10,71,20,196) ;
	int days, hours ;

		gotoxy(10,21) ;
		cout <<"                                               " ;
		gotoxy(10,11) ;
		cout <<"                        " ;
		gotoxy(10,13) ;
		cout <<"                        " ;

	gotoxy(10,10) ;
	cout<<"CALL DURATION CHARGE :" ;
	gotoxy(10,11);
	cout<<"SERVICE TAX :";
	gotoxy(10,12) ;
	cout <<"ADDITIONAL CHARGE" ;

		gotoxy(12,13) ;
		cout <<"NET CHARGE :" ;
		gotoxy(12,14) ;
		cout <<"HI SPEED CHARGE :" ;
		gotoxy(12,15) ;
		cout <<"SERVICE TAX :" ;


	gotoxy(10,17) ;
	cout <<"CHARGES" ;
	gotoxy(12,18) ;
	cout <<"TOTAL DURATION CHARGES :" ;

		gotoxy(12,19) ;
		cout <<"TOTAL INTERNET CHARGES : " ;

	gotoxy(10,21) ;
	cout <<"TOTAL AMOUNT :" ;
	gotoxy(6,24) ;
	cout <<"DISHTRIDYUMN SHRIVASTAVA" ;
	gotoxy(64,24) ;
	cout <<"KAPIL CHOUHAN" ;
	float INC=0.0, CA=0.0, NT=0.0, DC=0.0, LD=0.0, netcharge, durcharge, totcharge ;


		if(pack=='A')
	       {
		if (intn== 'Y')
			INC = 1500 ;
		if (hspn == 'Y')
			CA  = 2000 ;

		NT  = ((INC/100)*1.2)+((CA/100)*2.3) ;
		DC  = dur*0.56;
		LD  = (dur/100)*6.7 ;
		}

		 if(pack=='B')
	       {
		if (intn== 'Y')
			INC = 1200 ;
		if (hspn == 'Y')
			CA  = 2000 ;

		NT  = ((INC/100)*1.2)+((CA/100)*2.3) ;
		DC  = dur*0.65;
		LD  = (dur/100)*6.7 ;
		}

		 if(pack=='C')
	       {
		if (intn== 'Y')
			INC = 900 ;
		if (hspn == 'Y')
			CA  = 1500 ;

		NT  = ((INC/100)*1.2)+((CA/100)*2.3) ;
		DC  = dur*0.78;
		LD  = (dur/100)*6.7 ;
		}

		 if(pack=='D')
	       {
		if (intn== 'Y')
			INC = 500 ;
		if (hspn == 'Y')
			CA  = 1000 ;

		NT  = ((INC/100)*1.2)+((CA/100)*2.3) ;
		DC  = dur*0.78;
		LD  = (dur/100)*6.7 ;
		}

		  if(pack=='E')
	       {
			INC = 0 ;
			CA  = 0 ;

		NT  = 0 ;
		DC  = dur*0.7;
		LD  = (dur/100)*6.7 ;
		}



		netcharge = INC+CA+NT ;
		durcharge = DC+LD ;


	totcharge = netcharge+durcharge ;

		gotoxy(56,13) ;
		cout <<"Rs,"<<INC ;
		gotoxy(56,14) ;
		cout <<"Rs."<<CA ;
		gotoxy(56,15) ;
		cout <<"Rs."<<NT ;
		gotoxy(56,10) ;
		cout <<"Rs."<<DC ;


	gotoxy(56,11) ;
	cout <<"Rs"<<LD ;
	gotoxy(56,19) ;
	cout <<"Rs." <<netcharge ;
	gotoxy(56,18) ;
	cout <<"Rs." <<durcharge ;
	gotoxy(56,21) ;
	cout <<"Rs"<<totcharge ;
	gotoxy(2,1) ;
	getch() ;
}


//**********************************************************
// MAIN FUNCTION CALLING MAIN MENU
//**********************************************************

void main(void)
{
	MENU menu ;
	menu.MAIN_MENU() ;
}
